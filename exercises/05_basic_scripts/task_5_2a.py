# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
inputValue = input('Введите IP-сети ')
Mask = inputValue.split('.')[-1].split('/')[-1]

ipValue=inputValue.split('/')[0]
ipValues=ipValue.split('.')

oct1, oct2, oct3, oct4 = [
    int(ipValues[0]),
    int(ipValues[1]),
    int(ipValues[2]),
    int(ipValues[3]),
]

ip_host_bin_template = "{0:08b}{1:08b}{2:08b}{3:08b}"
ip_host_bin = ip_host_bin_template.format(oct1,oct2,oct3,oct4)

zero_count = 32-int(Mask)
ip_nw_bin = ip_host_bin[0:int(Mask)]+"0"*zero_count

oct_nw1, oct_nw2, oct_nw3, oct_nw4 = [
    int(ip_nw_bin[0:8], 2),
    int(ip_nw_bin[8:16], 2),
    int(ip_nw_bin[16:24], 2),
    int(ip_nw_bin[24:32], 2),
]
mask_bin = "1"*(int(Mask))+"0"*(32-int(Mask))

m1, m2, m3, m4 = [
    int(mask_bin[0:8], 2),
    int(mask_bin[8:16], 2),
    int(mask_bin[16:24], 2),
    int(mask_bin[24:32], 2),
]
stringTemplate = '''
Network: 
{0:<10} {1:<10} {2:<10} {3:<10}
{0:08b}  {1:08b}  {2:08b}  {3:08b}

Mask:
/{4}
{5:<8}  {6:<8}  {7:<8}  {8:<8}
{5:08b}  {6:08b}  {7:08b}  {8:08b}
'''
result = stringTemplate.format(oct_nw1,oct_nw2,oct_nw3,oct_nw4,int(Mask),m1,m2,m3,m4)

print(result)
